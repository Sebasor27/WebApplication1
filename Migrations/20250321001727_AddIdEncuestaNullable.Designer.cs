// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication1.Models;

#nullable disable

namespace WebApplication1.Migrations
{
    [DbContext(typeof(CentroEmpContext))]
    [Migration("20250321001727_AddIdEncuestaNullable")]
    partial class AddIdEncuestaNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebApplication1.Models.AccionesIepm", b =>
                {
                    b.Property<int>("IdAccionesIepm")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_accionesIEPM");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAccionesIepm"));

                    b.Property<string>("Rango")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("rango");

                    b.Property<string>("Valoracion")
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("valoracion");

                    b.HasKey("IdAccionesIepm")
                        .HasName("PK_accionesIEPM");

                    b.ToTable("accionesIEPM", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Competencia", b =>
                {
                    b.Property<int>("IdCompetencia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_competencia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCompetencia"));

                    b.Property<string>("NombreCompetencia")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre_competencia");

                    b.Property<decimal>("PesoRelativo")
                        .HasPrecision(6, 5)
                        .HasColumnType("decimal(6,5)")
                        .HasColumnName("peso_relativo");

                    b.Property<int>("PuntosMaximos")
                        .HasColumnType("int")
                        .HasColumnName("puntos_maximos");

                    b.HasKey("IdCompetencia")
                        .HasName("PK_competencias");

                    b.ToTable("competencias", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.DatosEmp", b =>
                {
                    b.Property<int>("IdDatosEmp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_datos_emp");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDatosEmp"));

                    b.Property<int>("IdEmprendedor")
                        .HasColumnType("int")
                        .HasColumnName("id_emprendedor");

                    b.Property<string>("NegociosEmp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("negocios_emp");

                    b.Property<string>("NivelEdAlc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nivel_ed_alc");

                    b.Property<string>("Provincia")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provincia");

                    b.Property<string>("RangoEdad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("rango_edad");

                    b.Property<string>("TitulosAlc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("titulos_alc");

                    b.HasKey("IdDatosEmp")
                        .HasName("PK_datos_emp");

                    b.HasIndex(new[] { "IdEmprendedor" }, "fk_id_emprendedor");

                    b.ToTable("datos_emp", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Dimensione", b =>
                {
                    b.Property<int>("IdDimension")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_dimension");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDimension"));

                    b.Property<string>("NombreDimension")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre_dimension");

                    b.Property<decimal>("PesoRelativo")
                        .HasPrecision(6, 5)
                        .HasColumnType("decimal(6,5)")
                        .HasColumnName("peso_relativo");

                    b.Property<int>("PuntosMaximos")
                        .HasColumnType("int")
                        .HasColumnName("puntos_maximos");

                    b.HasKey("IdDimension")
                        .HasName("PK_dimensiones");

                    b.ToTable("dimensiones", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Emprendedore", b =>
                {
                    b.Property<int>("IdEmprendedor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_emprendedor");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdEmprendedor"));

                    b.Property<short>("AnoCreacionEmpresa")
                        .HasColumnType("smallint")
                        .HasColumnName("ano_creacion_empresa");

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("cedula");

                    b.Property<string>("Celular")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("celular");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("correo");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("direccion");

                    b.Property<string>("Edad")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("edad");

                    b.Property<int>("EmpleadosHombres")
                        .HasColumnType("int")
                        .HasColumnName("empleados_hombres");

                    b.Property<int>("EmpleadosMujeres")
                        .HasColumnType("int")
                        .HasColumnName("empleados_mujeres");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.Property<string>("NivelEstudio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nivel_estudio");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("RangoEdadEmpleados")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("rango_edad_empleados");

                    b.Property<string>("Ruc")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)")
                        .HasColumnName("ruc");

                    b.Property<string>("SueldoMensual")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("sueldo_mensual");

                    b.Property<string>("Telefono")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("telefono");

                    b.Property<string>("TipoEmpresa")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("tipo_empresa");

                    b.Property<bool>("TrabajoRelacionDependencia")
                        .HasColumnType("bit")
                        .HasColumnName("trabajo_relacion_dependencia");

                    b.HasKey("IdEmprendedor")
                        .HasName("Pk_emprendedores");

                    b.HasIndex(new[] { "Cedula" }, "cedula")
                        .IsUnique();

                    b.HasIndex(new[] { "Correo" }, "correo")
                        .IsUnique();

                    b.HasIndex(new[] { "IdUsuario" }, "id_usuario");

                    b.HasIndex(new[] { "Ruc" }, "ruc")
                        .IsUnique();

                    b.ToTable("emprendedores", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.EncuestasIce", b =>
                {
                    b.Property<int>("IdRespuesta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_respuesta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRespuesta"));

                    b.Property<int>("IdEmprendedor")
                        .HasColumnType("int")
                        .HasColumnName("id_emprendedor");

                    b.Property<int>("IdEncuesta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("id_encuesta");

                    b.Property<int>("IdPregunta")
                        .HasColumnType("int")
                        .HasColumnName("id_pregunta");

                    b.Property<int>("ValorRespuesta")
                        .HasColumnType("int")
                        .HasColumnName("valor_respuesta");

                    b.HasKey("IdRespuesta")
                        .HasName("Pk_encuestas_ice");

                    b.HasIndex(new[] { "IdEmprendedor" }, "id_emprendedor");

                    b.HasIndex(new[] { "IdEncuesta" }, "id_encuesta");

                    b.HasIndex(new[] { "IdPregunta" }, "id_pregunta");

                    b.ToTable("encuestas_ice", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.EncuestasIepm", b =>
                {
                    b.Property<int>("IdRespuesta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_respuesta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRespuesta"));

                    b.Property<int>("IdEmprendedor")
                        .HasColumnType("int")
                        .HasColumnName("id_emprendedor");

                    b.Property<int>("IdPregunta")
                        .HasColumnType("int")
                        .HasColumnName("id_pregunta");

                    b.Property<int>("ValorRespuesta")
                        .HasColumnType("int")
                        .HasColumnName("valor_respuesta");

                    b.HasKey("IdRespuesta")
                        .HasName("PK_encuestas_iepm");

                    b.HasIndex(new[] { "IdEmprendedor" }, "id_emprendedor");

                    b.HasIndex(new[] { "IdPregunta" }, "id_pregunta");

                    b.ToTable("encuestas_iepm", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Indicadore", b =>
                {
                    b.Property<int>("IdIndicadores")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_indicadores");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdIndicadores"));

                    b.Property<string>("Acciones")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("acciones");

                    b.Property<string>("NivelDesarrollo")
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("nivel_desarrollo");

                    b.Property<string>("Rango")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("rango");

                    b.Property<string>("Valoracion")
                        .HasMaxLength(550)
                        .HasColumnType("nvarchar(550)")
                        .HasColumnName("valoracion");

                    b.HasKey("IdIndicadores")
                        .HasName("Pk_indicadores");

                    b.ToTable("indicadores", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.PreguntasIce", b =>
                {
                    b.Property<int>("IdPregunta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pregunta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPregunta"));

                    b.Property<int>("IdCompetencia")
                        .HasColumnType("int")
                        .HasColumnName("id_competencia");

                    b.Property<string>("TextoPregunta")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("texto_pregunta");

                    b.HasKey("IdPregunta")
                        .HasName("PK_preguntas_ice");

                    b.HasIndex(new[] { "IdCompetencia" }, "id_competencia");

                    b.ToTable("preguntas_ice", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.PreguntasIepm", b =>
                {
                    b.Property<int>("IdPregunta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pregunta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPregunta"));

                    b.Property<int>("IdDimension")
                        .HasColumnType("int")
                        .HasColumnName("id_dimension");

                    b.Property<string>("TextoPregunta")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("texto_pregunta");

                    b.HasKey("IdPregunta")
                        .HasName("PK_preguntas_iepm");

                    b.HasIndex(new[] { "IdDimension" }, "id_dimension");

                    b.ToTable("preguntas_iepm", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.ResultadosIce", b =>
                {
                    b.Property<int>("IdResultado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_resultado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdResultado"));

                    b.Property<int>("IdCompetencia")
                        .HasColumnType("int")
                        .HasColumnName("id_competencia");

                    b.Property<int>("IdEmprendedor")
                        .HasColumnType("int")
                        .HasColumnName("id_emprendedor");

                    b.Property<int>("IdEncuesta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("id_encuesta");

                    b.Property<decimal>("PuntuacionCompetencia")
                        .HasPrecision(6, 5)
                        .HasColumnType("decimal(6,5)")
                        .HasColumnName("puntuacion_competencia");

                    b.Property<int>("Valoracion")
                        .HasColumnType("int")
                        .HasColumnName("valoracion");

                    b.HasKey("IdResultado")
                        .HasName("PK_resultados_ice");

                    b.HasIndex(new[] { "IdCompetencia" }, "id_competencia");

                    b.HasIndex(new[] { "IdEmprendedor" }, "id_emprendedor");

                    b.ToTable("resultados_ice", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.ResultadosIepm", b =>
                {
                    b.Property<int>("IdResultado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_resultado");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdResultado"));

                    b.Property<int>("IdDimension")
                        .HasColumnType("int")
                        .HasColumnName("id_dimension");

                    b.Property<int>("IdEmprendedor")
                        .HasColumnType("int")
                        .HasColumnName("id_emprendedor");

                    b.Property<decimal>("PuntuacionDimension")
                        .HasPrecision(6, 5)
                        .HasColumnType("decimal(6,5)")
                        .HasColumnName("puntuacion_dimension");

                    b.HasKey("IdResultado")
                        .HasName("PK_resultados_iepm");

                    b.HasIndex(new[] { "IdDimension" }, "id_dimension");

                    b.HasIndex(new[] { "IdEmprendedor" }, "id_emprendedor");

                    b.ToTable("resultados_iepm", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.ResumenIce", b =>
                {
                    b.Property<int>("IdEmprendedor")
                        .HasColumnType("int")
                        .HasColumnName("id_emprendedor");

                    b.Property<int>("IdEncuesta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("id_encuesta");

                    b.Property<int?>("IdIndicadores")
                        .HasColumnType("int")
                        .HasColumnName("id_indicadores");

                    b.Property<decimal>("ValorIceTotal")
                        .HasPrecision(6, 5)
                        .HasColumnType("decimal(6,5)")
                        .HasColumnName("valor_ice_total");

                    b.HasKey("IdEmprendedor")
                        .HasName("PK_resumen_ice");

                    b.HasIndex(new[] { "IdIndicadores" }, "id_indicador_ice_ibfk_2");

                    b.ToTable("resumen_ice", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.ResumenIepm", b =>
                {
                    b.Property<int>("IdEmprendedor")
                        .HasColumnType("int")
                        .HasColumnName("id_emprendedor");

                    b.Property<int?>("IdAccionesIepm")
                        .HasColumnType("int")
                        .HasColumnName("id_accionesIEPM");

                    b.Property<decimal>("ValorIepmTotal")
                        .HasPrecision(6, 5)
                        .HasColumnType("decimal(6,5)")
                        .HasColumnName("valor_iepm_total");

                    b.HasKey("IdEmprendedor")
                        .HasName("Pk_resumen_iepm");

                    b.HasIndex(new[] { "IdAccionesIepm" }, "acciones_iepm_ibfk_2");

                    b.ToTable("resumen_iepm", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.Usuario", b =>
                {
                    b.Property<int>("IdUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUsuario"));

                    b.Property<string>("Contraseña")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contraseña");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("correo");

                    b.Property<DateTime>("FechaCreacion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("fecha_creacion")
                        .HasDefaultValueSql("current_timestamp()");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre");

                    b.Property<string>("TipoUsuario")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("tipo_usuario");

                    b.HasKey("IdUsuario")
                        .HasName("PK_usuarios");

                    b.HasIndex(new[] { "Correo" }, "correo")
                        .IsUnique();

                    b.ToTable("usuarios", (string)null);
                });

            modelBuilder.Entity("WebApplication1.Models.DatosEmp", b =>
                {
                    b.HasOne("WebApplication1.Models.Emprendedore", "IdEmprendedorNavigation")
                        .WithMany("DatosEmps")
                        .HasForeignKey("IdEmprendedor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_id_emprendedor");

                    b.Navigation("IdEmprendedorNavigation");
                });

            modelBuilder.Entity("WebApplication1.Models.Emprendedore", b =>
                {
                    b.HasOne("WebApplication1.Models.Usuario", "IdUsuarioNavigation")
                        .WithMany("Emprendedores")
                        .HasForeignKey("IdUsuario")
                        .IsRequired()
                        .HasConstraintName("emprendedores_ibfk_1");

                    b.Navigation("IdUsuarioNavigation");
                });

            modelBuilder.Entity("WebApplication1.Models.EncuestasIce", b =>
                {
                    b.HasOne("WebApplication1.Models.Emprendedore", "IdEmprendedorNavigation")
                        .WithMany("EncuestasIces")
                        .HasForeignKey("IdEmprendedor")
                        .IsRequired()
                        .HasConstraintName("encuestas_ice_ibfk_1");

                    b.HasOne("WebApplication1.Models.PreguntasIce", "IdPreguntaNavigation")
                        .WithMany("EncuestasIces")
                        .HasForeignKey("IdPregunta")
                        .IsRequired()
                        .HasConstraintName("encuestas_ice_ibfk_2");

                    b.Navigation("IdEmprendedorNavigation");

                    b.Navigation("IdPreguntaNavigation");
                });

            modelBuilder.Entity("WebApplication1.Models.EncuestasIepm", b =>
                {
                    b.HasOne("WebApplication1.Models.Emprendedore", "IdEmprendedorNavigation")
                        .WithMany("EncuestasIepms")
                        .HasForeignKey("IdEmprendedor")
                        .IsRequired()
                        .HasConstraintName("encuestas_iepm_ibfk_1");

                    b.HasOne("WebApplication1.Models.PreguntasIepm", "IdPreguntaNavigation")
                        .WithMany("EncuestasIepms")
                        .HasForeignKey("IdPregunta")
                        .IsRequired()
                        .HasConstraintName("encuestas_iepm_ibfk_2");

                    b.Navigation("IdEmprendedorNavigation");

                    b.Navigation("IdPreguntaNavigation");
                });

            modelBuilder.Entity("WebApplication1.Models.PreguntasIce", b =>
                {
                    b.HasOne("WebApplication1.Models.Competencia", "IdCompetenciaNavigation")
                        .WithMany("PreguntasIces")
                        .HasForeignKey("IdCompetencia")
                        .IsRequired()
                        .HasConstraintName("preguntas_ice_ibfk_1");

                    b.Navigation("IdCompetenciaNavigation");
                });

            modelBuilder.Entity("WebApplication1.Models.PreguntasIepm", b =>
                {
                    b.HasOne("WebApplication1.Models.Dimensione", "IdDimensionNavigation")
                        .WithMany("PreguntasIepms")
                        .HasForeignKey("IdDimension")
                        .IsRequired()
                        .HasConstraintName("preguntas_iepm_ibfk_1");

                    b.Navigation("IdDimensionNavigation");
                });

            modelBuilder.Entity("WebApplication1.Models.ResultadosIce", b =>
                {
                    b.HasOne("WebApplication1.Models.Competencia", "IdCompetenciaNavigation")
                        .WithMany("ResultadosIces")
                        .HasForeignKey("IdCompetencia")
                        .IsRequired()
                        .HasConstraintName("resultados_ice_ibfk_2");

                    b.HasOne("WebApplication1.Models.Emprendedore", "IdEmprendedorNavigation")
                        .WithMany("ResultadosIces")
                        .HasForeignKey("IdEmprendedor")
                        .IsRequired()
                        .HasConstraintName("resultados_ice_ibfk_1");

                    b.Navigation("IdCompetenciaNavigation");

                    b.Navigation("IdEmprendedorNavigation");
                });

            modelBuilder.Entity("WebApplication1.Models.ResultadosIepm", b =>
                {
                    b.HasOne("WebApplication1.Models.Dimensione", "IdDimensionNavigation")
                        .WithMany("ResultadosIepms")
                        .HasForeignKey("IdDimension")
                        .IsRequired()
                        .HasConstraintName("resultados_iepm_ibfk_2");

                    b.HasOne("WebApplication1.Models.Emprendedore", "IdEmprendedorNavigation")
                        .WithMany("ResultadosIepms")
                        .HasForeignKey("IdEmprendedor")
                        .IsRequired()
                        .HasConstraintName("resultados_iepm_ibfk_1");

                    b.Navigation("IdDimensionNavigation");

                    b.Navigation("IdEmprendedorNavigation");
                });

            modelBuilder.Entity("WebApplication1.Models.ResumenIce", b =>
                {
                    b.HasOne("WebApplication1.Models.Emprendedore", "IdEmprendedorNavigation")
                        .WithOne("ResumenIce")
                        .HasForeignKey("WebApplication1.Models.ResumenIce", "IdEmprendedor")
                        .IsRequired()
                        .HasConstraintName("resumen_ice_ibfk_1");

                    b.HasOne("WebApplication1.Models.Indicadore", "IdIndicadoresNavigation")
                        .WithMany("ResumenIces")
                        .HasForeignKey("IdIndicadores")
                        .HasConstraintName("id_indicador_ice_ibfk_2");

                    b.Navigation("IdEmprendedorNavigation");

                    b.Navigation("IdIndicadoresNavigation");
                });

            modelBuilder.Entity("WebApplication1.Models.ResumenIepm", b =>
                {
                    b.HasOne("WebApplication1.Models.AccionesIepm", "IdAccionesIepmNavigation")
                        .WithMany("ResumenIepms")
                        .HasForeignKey("IdAccionesIepm")
                        .HasConstraintName("acciones_iepm_ibfk_2");

                    b.HasOne("WebApplication1.Models.Emprendedore", "IdEmprendedorNavigation")
                        .WithOne("ResumenIepm")
                        .HasForeignKey("WebApplication1.Models.ResumenIepm", "IdEmprendedor")
                        .IsRequired()
                        .HasConstraintName("resumen_iepm_ibfk_1");

                    b.Navigation("IdAccionesIepmNavigation");

                    b.Navigation("IdEmprendedorNavigation");
                });

            modelBuilder.Entity("WebApplication1.Models.AccionesIepm", b =>
                {
                    b.Navigation("ResumenIepms");
                });

            modelBuilder.Entity("WebApplication1.Models.Competencia", b =>
                {
                    b.Navigation("PreguntasIces");

                    b.Navigation("ResultadosIces");
                });

            modelBuilder.Entity("WebApplication1.Models.Dimensione", b =>
                {
                    b.Navigation("PreguntasIepms");

                    b.Navigation("ResultadosIepms");
                });

            modelBuilder.Entity("WebApplication1.Models.Emprendedore", b =>
                {
                    b.Navigation("DatosEmps");

                    b.Navigation("EncuestasIces");

                    b.Navigation("EncuestasIepms");

                    b.Navigation("ResultadosIces");

                    b.Navigation("ResultadosIepms");

                    b.Navigation("ResumenIce");

                    b.Navigation("ResumenIepm");
                });

            modelBuilder.Entity("WebApplication1.Models.Indicadore", b =>
                {
                    b.Navigation("ResumenIces");
                });

            modelBuilder.Entity("WebApplication1.Models.PreguntasIce", b =>
                {
                    b.Navigation("EncuestasIces");
                });

            modelBuilder.Entity("WebApplication1.Models.PreguntasIepm", b =>
                {
                    b.Navigation("EncuestasIepms");
                });

            modelBuilder.Entity("WebApplication1.Models.Usuario", b =>
                {
                    b.Navigation("Emprendedores");
                });
#pragma warning restore 612, 618
        }
    }
}
